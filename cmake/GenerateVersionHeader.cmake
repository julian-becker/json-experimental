include_guard(GLOBAL)
find_package(git)

## generate_version_header(<name of project>
##   [HEADER_FILE_NAME <path of header file to generate>]
##   [VERSION_STRING_MACRO_NAME <name of macro with version-string "Major.Minor.Patch">] # defaults to <name of project>_VERSION
##   [VERSION_MAJOR_MACRO_NAME <name of macro with major version>] # defaults to <name of project>_VERSION_MAJOR
##   [VERSION_MINOR_MACRO_NAME <name of macro with minor version>] # defaults to <name of project>_VERSION_MINOR
##   [VERSION_PATCH_MACRO_NAME <name of macro with patch version>] # defaults to <name of project>_VERSION_PATCH
## )
macro(generate_version_header)
  cmake_parse_arguments(_GENERATE_VERSION_HEADER "" "PROJECT_NAME;HEADER_FILE_NAME;VERSION_STRING_MACRO_NAME;VERSION_MAJOR_MACRO_NAME;VERSION_MINOR_MACRO_NAME;VERSION_PATCH_MACRO_NAME" "" ${ARGN})
  if(NOT _GENERATE_VERSION_HEADER_PROJECT_NAME)
    message(FATAL_ERROR "Missing `PROJECT_NAME` giving the name of the project" )
  endif()
  string(TOUPPER "${_GENERATE_VERSION_HEADER_PROJECT_NAME}" _GENERATE_VERSION_HEADER_PROJECT_NAME_UPPERCASE)
  if(NOT _GENERATE_VERSION_HEADER_HEADER_FILE_NAME)
    message(FATAL_ERROR "Missing argument `HEADER_FILE_NAME <name of header file to generate>`" )
  endif()
  if(NOT _GENERATE_VERSION_HEADER_VERSION_STRING_MACRO_NAME)
    set(_GENERATE_VERSION_HEADER_VERSION_STRING_MACRO_NAME "${_GENERATE_VERSION_HEADER_PROJECT_NAME_UPPERCASE}_VERSION")
  endif()
  if(NOT _GENERATE_VERSION_HEADER_VERSION_MAJOR_MACRO_NAME)
    set(_GENERATE_VERSION_HEADER_VERSION_MAJOR_MACRO_NAME "${_GENERATE_VERSION_HEADER_PROJECT_NAME_UPPERCASE}_VERSION_MAJOR")
  endif()
  if(NOT _GENERATE_VERSION_HEADER_VERSION_MINOR_MACRO_NAME)
    set(_GENERATE_VERSION_HEADER_VERSION_MINOR_MACRO_NAME "${_GENERATE_VERSION_HEADER_PROJECT_NAME_UPPERCASE}_VERSION_MINOR")
  endif()
  if(NOT _GENERATE_VERSION_HEADER_VERSION_PATCH_MACRO_NAME)
    set(_GENERATE_VERSION_HEADER_VERSION_PATCH_MACRO_NAME "${_GENERATE_VERSION_HEADER_PROJECT_NAME_UPPERCASE}_VERSION_PATCH")
  endif()
  
  message("Generating ${_GENERATE_VERSION_HEADER_HEADER_FILE_NAME} for project ${_GENERATE_VERSION_HEADER_PROJECT_NAME} with version ${${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_MAJOR}.${${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_MINOR}.${${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_PATCH}")

  set(_GENERATE_VERSION_HEADER_VERSION__VERSION_STRING "${${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_MAJOR}.${${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_MINOR}.${${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_PATCH}")

  file(WRITE ${_GENERATE_VERSION_HEADER_HEADER_FILE_NAME}.in
  "\#define VERSION \"@_GENERATE_VERSION_HEADER_VERSION__VERSION_STRING@\"\n"
  "\#define ${_GENERATE_VERSION_HEADER_VERSION_MAJOR_MACRO_NAME} @${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_MAJOR@\n"
  "\#define ${_GENERATE_VERSION_HEADER_VERSION_MINOR_MACRO_NAME} @${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_MINOR@\n"
  "\#define ${_GENERATE_VERSION_HEADER_VERSION_PATCH_MACRO_NAME} @${_GENERATE_VERSION_HEADER_PROJECT_NAME}_VERSION_PATCH@\n"
  )
  
  configure_file("${_GENERATE_VERSION_HEADER_HEADER_FILE_NAME}.in" "${_GENERATE_VERSION_HEADER_HEADER_FILE_NAME}" @ONLY)

  unset(_GENERATE_VERSION_HEADER_PROJECT_NAME)
  unset(_GENERATE_VERSION_HEADER_HEADER_FILE_NAME)
  unset(_GENERATE_VERSION_HEADER_VERSION_STRING_MACRO_NAME)
  unset(_GENERATE_VERSION_HEADER_VERSION_MAJOR_MACRO_NAME)
  unset(_GENERATE_VERSION_HEADER_VERSION_MINOR_MACRO_NAME)
  unset(_GENERATE_VERSION_HEADER_VERSION_PATCH_MACRO_NAME)
  unset(_GENERATE_VERSION_HEADER_VERSION__VERSION_STRING)
endmacro(generate_version_header)


